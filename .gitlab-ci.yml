variables:
  # Domain appended to the environment slug for reviews
  REVIEW_BASE_DOMAIN: "example.com"
  # The domain used for the live deployment
  LIVE_DOMAIN: "example.com"
  KUBE_NAMESPACE: presentation-gitlab-k8s

image:
  name: "golang:1.16.2-buster"
  entrypoint: ["/bin/sh", "-c"]

stages:
  - test
  - build
  - release
  - review
  - deploy

test:
  stage: test
  script:
    - make test

test2:
  stage: test
  script:
    - sleep 3
    - echo "This task runs in parallel!"

compile:
  stage: build
  script:
    # Add here all the dependencies, or use glide/govendor/...
    # to get them automatically.
    - make build
  artifacts:
    paths:
      - app

# Example job to upload the built release to a S3 server with mc
# For this you need to set `S3_ACCESS_KEY` and `S3_SECRET_KEY` in your GitLab project CI's secret variables
#release_upload:
#  stage: release
#  image:
#    name: minio/mc
#    entrypoint: ["/bin/sh", "-c"]
#  script:
#    - echo "=> We already have artifact sotrage in GitLab! This is for demonstational purposes only."
#    - mc config host add mys3host https://my-s3-host.example.com ${ACCESS_KEY} ${SECRET_KEY} S3v4
#    - mc mb -p mys3host/build-release-${CI_PROJECT_NAME}/
#    - mc cp app mys3host/build-release-${CI_PROJECT_NAME}/

image_build:
  stage: release
  image:
    name: "docker:19.03.13"
    entrypoint: ["/bin/sh", "-c"]
  variables:
    DOCKER_HOST: tcp://docker:2375
    # See https://about.gitlab.com/blog/2019/07/31/docker-in-docker-with-docker-19-dot-03/
    # Yeah, disabling TLS isn't the best way, but most Gitlab sadly haven't fixed their
    # runners, so if you read this message, follow the post and fix the runners to use TLS
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: "docker:19.03.13-dind"
  before_script:
    # Show docker daemon info (optional, good for debugging)
    - docker info
    # Login to the Gitlab Container registry
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
  script:
    # Build the container image
    - docker build -t "${CI_REGISTRY_IMAGE}:latest" .
    # Tag the container image from latest to the commit ref
    - docker tag "${CI_REGISTRY_IMAGE}:latest" "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}"
    # Push the container image
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}"
    # If we are building a tag, push the `latest` container image tag too
    - if [ ! -z "${CI_COMMIT_TAG}" ]; then docker push "${CI_REGISTRY_IMAGE}:latest"; fi

deploy_review:
  image:
    name: "alpine/helm:3.5.3"
    entrypoint: ["/bin/sh", "-c"]
  stage: review
  # Only deploy the review for branches (this includes the `main` / `master` branch)
  # but not tags
  only:
    - branches
  except:
    - tags
  environment:
    name: "review/${CI_BUILD_REF_NAME}"
    url: "https://${CI_ENVIRONMENT_SLUG}-${KUBE_NAMESPACE}.${REVIEW_BASE_DOMAIN}"
    on_stop: stop_review
    kubernetes:
      namespace: "${KUBE_NAMESPACE}"
  script:
    - |
      helm upgrade \
        --install \
        --values values.yaml \
        --set image.repository="${CI_REGISTRY_IMAGE}" \
        --set image.tag="${CI_COMMIT_REF_NAME}" \
        --set ingress.hosts[0].host="${CI_ENVIRONMENT_URL}" \
        --set ingress.tls[0].hosts[0]="${CI_ENVIRONMENT_URL}" \
        --set certmanager.spec.dnsNames[0]="${CI_BUILD_REF_NAME}" \
        "${CI_BUILD_REF_NAME}" \
        ./charts/app

stop_review:
  image:
    name: "alpine/helm:3.5.3"
    entrypoint: ["/bin/sh", "-c"]
  stage: review
  variables:
    GIT_STRATEGY: "none"
  when: manual
  # Don't stop the "review" for master branch or tags,
  # it is only for branches (so PRs (most of the time))
  only:
    - branches
  except:
    - master
    - main
    - tags
  environment:
    name: "review/$CI_BUILD_REF_NAME"
    action: stop
    kubernetes:
      namespace: "${KUBE_NAMESPACE}"
  script:
    - kubectl version
    - helm uninstall "${CI_BUILD_REF_NAME}"

deploy_live:
  image:
    name: alpine/helm:3.5.3
    entrypoint: ["/bin/sh", "-c"]
  stage: deploy
  environment:
    name: live
    url: "https://${LIVE_DOMAIN}"
    kubernetes:
      namespace: "${KUBE_NAMESPACE}"
  only:
    - tags
  when: manual
  script:
    - |
      helm upgrade \
        --install \
        --values values.yaml \
        --set image.repository="${CI_REGISTRY_IMAGE}" \
        --set image.tag="${CI_COMMIT_REF_NAME}" \
        --set ingress.hosts[0].host="${CI_ENVIRONMENT_URL}" \
        --set ingress.tls[0].hosts[0]="${CI_ENVIRONMENT_URL}" \
        --set certmanager.spec.dnsNames[0]="${CI_BUILD_REF_NAME}" \
        live \
        ./charts/app
